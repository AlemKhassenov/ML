import os
import base64
import openai
import pandas as pd
from dotenv import load_dotenv
import streamlit as st
from PIL import Image
from io import BytesIO
from streamlit_drawable_canvas import st_canvas
from fpdf import FPDF
from datetime import datetime
from langchain.prompts import ChatPromptTemplate
from langchain.schema import HumanMessage
import random
from datetime import datetime
import re

st.set_page_config(page_title="üìê AI-Gebra", layout="wide") 
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—é–¥–∂–µ—Ç–∞ ---
BUDGET_FILE = "budget.csv"
if os.path.exists(BUDGET_FILE):
    df_budget = pd.read_csv(BUDGET_FILE)
else:
    df_budget = pd.DataFrame(columns=["username", "spent_usd"])

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ session_state (—ç–º—É–ª—è—Ü–∏—è –±–∞–∑—ã) 
if "users" not in st.session_state:
    st.session_state.users = {
        "aidana": {"password": "1234", "role": "student"},
        "bekzat": {"password": "abcd", "role": "student"},
        "teacher": {"password": "admin", "role": "teacher"}
    }

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.username = ""
# —Å—á–µ—Ç—á–∏–∫   
if "budget_usd" not in st.session_state:
    st.session_state.budget_usd = 10.00  # üíµ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±—é–¥–∂–µ—Ç
if "spent_usd" not in st.session_state:
    st.session_state.spent_usd = 0.00

COST_GENERATE = 0.00275
COST_CHECK = 0.02000
# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
def registration_form():
    with st.form("register_form"):
        st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        new_username = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω")
        new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        role = st.selectbox("–†–æ–ª—å", ["student", "teacher"])
        submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        if submitted:
            if new_username in st.session_state.users:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                st.session_state.users[new_username] = {"password": new_password, "role": role}
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{new_username}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {role}")

# --- –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è ---
def password_change_form():
    with st.form("change_pass_form"):
        st.subheader("üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        current = st.text_input("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å", type="password")
        new_pass = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        submit = st.form_submit_button("–°–º–µ–Ω–∏—Ç—å")
        if submit:
            user = st.session_state.username
            if st.session_state.users[user]["password"] == current:
                st.session_state.users[user]["password"] = new_pass
                st.success("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")

# --- –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---
if not st.session_state.authenticated:
    st.title("üîê –í—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    auth_tab, reg_tab = st.tabs(["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with auth_tab:
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        role = st.selectbox("–†–æ–ª—å –ø—Ä–∏ –≤—Ö–æ–¥–µ", ["student", "teacher"])
        if st.button("–í–æ–π—Ç–∏"):
            users = st.session_state.users
            if username in users and users[username]["password"] == password:
                if users[username]["role"] != role:
                    st.error(f"–†–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {users[username]['role']}")
                else:
                    st.session_state.authenticated = True
                    st.session_state.username = username
                    st.session_state.role = role
                    st.stop()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    with reg_tab:
        registration_form()

else:
    username = st.session_state.username
    role = st.session_state.role
    st.sidebar.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username} ({role})!")
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state.authenticated = False
        st.session_state.username = ""
        st.stop()

     # --- –ë—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    user_row = df_budget[df_budget["username"] == username]
    if not user_row.empty:
        st.session_state.spent_usd = float(user_row.iloc[0]["spent_usd"])
    else:
        st.session_state.spent_usd = 0.0
        df_budget = pd.concat([
            df_budget,
            pd.DataFrame([{"username": username, "spent_usd": 0.0}])
        ], ignore_index=True)
        df_budget.to_csv(BUDGET_FILE, index=False)


    if st.sidebar.button("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"):
        st.session_state.show_password_form = not st.session_state.get("show_password_form", False)

    remaining = st.session_state.budget_usd - st.session_state.spent_usd
    st.sidebar.markdown(f"üí∞ *–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞:* **${remaining:.2f}**")
    if remaining < 1.00:
        st.sidebar.error("‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ $1 ‚Äî –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")


    if st.session_state.get("show_password_form"):
        password_change_form()
# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–ø–∏
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")

    st.markdown("## üé≤ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ")

    unit = st.selectbox("–†–∞–∑–¥–µ–ª", [
        "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã", "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"
])

    topic = st.selectbox("–¢–µ–º–∞", {
        "–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã": [
            "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º",
            "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–µ",
            "–ü—Ä—è–º–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ],
        "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ": [
            "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
            "–¶–µ–ø–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
            "–ü—Ä–µ–¥–µ–ª —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        ],
        "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏": [
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏",
            "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ—Ä–µ–¥–∏–Ω—ã",
            "–î–µ–ª–µ–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏"
        ]
    }[unit])
#–∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º 
    
    difficulty = st.selectbox("–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è", ["–õ—ë–≥–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–æ–∂–Ω–∞—è"])

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"):
    # üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        phrases = [
        "–°–¥–µ–ª–∞–π –∑–∞–¥–∞—á—É –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ.",
        "–°–¥–µ–ª–∞–π –∑–∞–¥–∞—á—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π.",
        "–ò–∑–º–µ–Ω–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
        "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É.",
        "–ò–∑–º–µ–Ω–∏ —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."
        ]
        random_phrase = random.choice(phrases)

        system_message = {
            "role": "system",
            "content": "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –§–æ—Ä–º—É–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤ LaTeX, –≤–Ω—É—Ç—Ä–∏ –¥–≤–æ–π–Ω—ã—Ö $$...$$."
        }
    # üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π prompt
        prompt = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –Ω–∞ —Ç–µ–º—É: {topic}, –≤ —Ä–∞–∑–¥–µ–ª–µ: {unit}.
    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}
    {random_phrase}
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

**–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:**  
–§–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º—É–ª—ã ‚Äî —Å—Ç—Ä–æ–≥–æ –≤ LaTeX –≤–Ω—É—Ç—Ä–∏ –¥–≤–æ–π–Ω—ã—Ö $$...$$.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 20 —Å–ª—É—á–∞—è—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –º–µ–Ω—è–π –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**  
–ù–∞–ø–∏—à–∏ –æ–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—á–µ–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.  
–ù–µ –ø–∏—à–∏ —Å–∞–º–æ —Ä–µ—à–µ–Ω–∏–µ –∏ –Ω–µ –≤–∫–ª—é—á–∞–π —Ñ–æ—Ä–º—É–ª—ã. –¢–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–≥–æ–≤.  
–ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. 
–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:
1. <–¥–µ–π—Å—Ç–≤–∏–µ> ‚Äî N –±–∞–ª–ª  
2. <–¥–µ–π—Å—Ç–≤–∏–µ> ‚Äî N –±–∞–ª–ª–∞  
...
**–ò—Ç–æ–≥–æ: X –±–∞–ª–ª–æ–≤**

**–ú–∞—Ä–∫-—Å—Ö–µ–º–∞:**  
–û–ø–∏—à–∏ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ —É–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –¥–∞—ë—Ç—Å—è –∑–∞ –∫–∞–∂–¥—ã–π.  
–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å Cambridge (IGCSE / AS / A-Level). –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –±–∞–ª–ª–æ–≤.  
–§–æ—Ä–º—É–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤ LaTeX: $$...$$.
**–ò—Ç–æ–≥–æ: X –±–∞–ª–ª–æ–≤**

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –õ—ë–≥–∫–∞—è –∑–∞–¥–∞—á–∞: 1‚Äì3 –±–∞–ª–ª–∞  
- –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: 1‚Äì5 –±–∞–ª–ª–æ–≤  
- –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞: 1‚Äì8 –±–∞–ª–ª–æ–≤  

üî¥ –í–∞–∂–Ω–æ:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–±–∫–∏ ( ... ) –≤ —Ñ–æ—Ä–º—É–ª–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ $$...$$
- –°–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
  1. <–¥–µ–π—Å—Ç–≤–∏–µ> ‚Äî N –±–∞–ª–ª–æ–≤  
  2. <...> ‚Äî N –±–∞–ª–ª–æ–≤  
  ...
  **–ò—Ç–æ–≥–æ: X –±–∞–ª–ª–æ–≤**

–ü—Ä–∏–º–µ—Ä:
**–£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:**  
–ù–∞–π–¥–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ $$x e^x$$

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**  
1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è  1 –±–∞–ª–ª
2. –†–∞–∑–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–∞–ø—ã  2 –±–∞–ª–ª–∞
3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è 1 –±–∞–ª–ª  
4. –ü—Ä–∏–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –∫ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ 1 –±–∞–ª–ª

**–ú–∞—Ä–∫-—Å—Ö–µ–º–∞:**  
1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º ‚Äî 2 –±–∞–ª–ª–∞  
2. –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é $$\\int e^x dx$$ ‚Äî 1 –±–∞–ª–ª  
3. –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äî 2 –±–∞–ª–ª–∞  
**–ò—Ç–æ–≥–æ: 5 –±–∞–ª–ª–æ–≤**

‚ùó –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞—á–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –°–¥–µ–ª–∞–π –∑–∞–¥–∞—á—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.
‚ùó–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ ( ... ) –¥–ª—è —Ñ–æ—Ä–º—É–ª. –í—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ LaTeX –≤–Ω—É—Ç—Ä–∏ –¥–≤–æ–π–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ $$...$$. 
–ù–∞–ø—Ä–∏–º–µ—Ä:
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: (\\sin(x) + C)  
–ü—Ä–∞–≤–∏–ª—å–Ω–æ: $$\\sin(x) + C$$
    """
        user_message = {"role": "user", "content": prompt}

        with st.spinner("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è..."):
            try:
                response = openai.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=300,
                    temperature=0.7,  # üìà –ë–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    seed=random.randint(1, 10**6)  # üîÄ –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑
                )
                generated_problem = response.choices[0].message.content.strip()
                st.session_state.generated_problem = generated_problem

                parts = generated_problem.split("**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**")
                problem_text = parts[0].strip()
                rest = parts[1].split("**–ú–∞—Ä–∫-—Å—Ö–µ–º–∞:**")
                success_criteria = rest[0].strip()
                mark_scheme = rest[1].strip() if len(rest) > 1 else ""

                #st.code(mark_scheme, language="markdown")

                #match = re.search(r"\*\*–ò—Ç–æ–≥–æ:\s*(\d+)\s*", mark_scheme)
                #total_points = int(match.group(1)) if match else 0
            
                st.session_state.generated_problem = problem_text
                st.session_state.success_criteria = success_criteria
                st.session_state.mark_scheme_text = mark_scheme
                #st.session_state.total_points = total_points
                #st.info(f"üîé –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {total_points} –±–∞–ª–ª–æ–≤")
                # üí∞ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
                st.session_state.spent_usd += COST_GENERATE
                df_budget.loc[df_budget["username"] == username, "spent_usd"] = st.session_state.spent_usd
                df_budget.to_csv(BUDGET_FILE, index=False)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    if "generated_problem" in st.session_state:
        st.markdown("### üß† –ß–∏—Ç–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ:")
        st.markdown(st.session_state.generated_problem, unsafe_allow_html=True)
    if "success_criteria" in st.session_state:
        st.markdown("### ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:")
        st.markdown(st.session_state.success_criteria)
    #if "total_points" in st.session_state:
        #st.markdown(f"### üéØ –ò—Ç–æ–≥–æ: **{st.session_state.total_points} –±–∞–ª–ª–æ–≤**")
    
     #if "mark_scheme_text" in st.session_state:
       #  st.markdown("### üìã –ú–∞—Ä–∫-—Å—Ö–µ–º–∞:")
         #st.markdown(st.session_state.mark_scheme_text)

    # –í–∞–∂–Ω–æ! —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–∞–∫ –±—É–¥—Ç–æ selected_problem:
        selected_problem = st.session_state.generated_problem

    
    if role == "student":
        st.markdown("### ‚úèÔ∏è –ó–∞–ø–∏—à–∏ —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        col1, col2, = st.columns(2)
        col3, = st.columns(1)
        with col1:
            drawing_mode = st.selectbox("üõ† –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è", [
                "freedraw", "line", "rect", "circle", "transform"
            ], key="drawing_mode_select")

        with col2:
            stroke_color = st.color_picker("üé® –¶–≤–µ—Ç –ø–µ—Ä–∞", "#000000", key="stroke_color_picker")

        with col3:
            stroke_width = st.slider("‚úèÔ∏è –¢–æ–ª—â–∏–Ω–∞", 1, 20, 4, key="stroke_width_slider")

        eraser_mode = st.checkbox("üßº –õ–∞—Å—Ç–∏–∫", key="eraser_checkbox")
        actual_color = "#FFFFFF" if eraser_mode else stroke_color

        canvas_key = f"canvas_{drawing_mode}"   

        canvas_result = st_canvas(
            fill_color="rgba(255, 255, 255, 1)",
            stroke_width=stroke_width,
            stroke_color=actual_color,
            background_color="#FFFFFF",
            height=1000,
            width=2000,
            drawing_mode=drawing_mode,
            key=canvas_key,
            update_streamlit=True
        )

        def encode_image_from_canvas(canvas_img):
            buffer = BytesIO()
            canvas_img.save(buffer, format="JPEG")
            return base64.b64encode(buffer.getvalue()).decode("utf-8"), buffer

        # –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞
        prompt_template = ChatPromptTemplate.from_messages([
            ("system", "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –§–æ—Ä–º—É–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤ LaTeX —Å –¥–≤–æ–π–Ω—ã–º–∏ $$...$$"),
            ("human", "{question}")
        ])

        def analyze_with_gpt_vision(problem_text,mark_scheme_text, base64_img):
            full_prompt = f"""
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ: **{problem_text}**
üìã –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –º–∞—Ä–∫-—Å—Ö–µ–º—É –¥–ª—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è (—Å—Ç–∏–ª—å Cambridge): {mark_scheme_text}

üñºÔ∏è –£—á–µ–Ω–∏–∫ —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (—Å–º. –Ω–∏–∂–µ).

üîç –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1. –°–∞–º —Ä–µ—à–∏ –∑–∞–¥–∞—á—É.
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ —É—á–µ–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞–ª.
3. –°—Ä–∞–≤–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è —É—á–µ–Ω–∏–∫–∞ —Å —à–∞–≥–∞–º–∏ –≤ –º–∞—Ä–∫-—Å—Ö–µ–º–µ.
4. –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–∞–≥ –Ω–∞—á–∏—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.
5. –£–∫–∞–∂–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —à–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
6. –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:  
**–û—Ü–µ–Ω–∫–∞: X –∏–∑ Y –±–∞–ª–ª–æ–≤**

üìò –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

**–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:**  
<—Ç–≤–æ—è —Ñ–æ—Ä–º—É–ª–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ>

**–ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:**  
<—á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —É—á–µ–Ω–∏–∫>

**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–∞—Ä–∫-—Å—Ö–µ–º–æ–π:**  
<–ø–æ —à–∞–≥–∞–º ‚Äî –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ>
<–µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏ –≤–µ—Ä–Ω–æ–µ, –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫ —Å—Ö–µ–º–µ>
**–ò—Ç–æ–≥:**  
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–µ—à–µ–Ω–æ? –ü–æ–¥–¥–µ—Ä–∂–∏ —É—á–µ–Ω–∏–∫–∞.

**–¢–∏–ø –æ—à–∏–±–∫–∏:**  
–û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ø—Ä–∞–≤–∏–ª—å–Ω–æ / –ª–æ–≥–∏—á–µ—Å–∫–∞—è / –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è / –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ

**–û—Ü–µ–Ω–∫–∞: X –∏–∑ Y –±–∞–ª–ª–æ–≤**

‚ùó–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ ( ... ) –¥–ª—è —Ñ–æ—Ä–º—É–ª. –í—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ LaTeX –≤–Ω—É—Ç—Ä–∏ –¥–≤–æ–π–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ $$...$$. 
–ù–∞–ø—Ä–∏–º–µ—Ä:
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: (\\sin(x) + C)  
–ü—Ä–∞–≤–∏–ª—å–Ω–æ: $$\\sin(x) + C$$
"""
            try:
                chain = prompt_template
                messages = chain.format_messages(question=full_prompt)

                vision_payload = {
                    "model": "gpt-4o",
                    "messages": [
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": messages[1].content},  # —Ç–æ–ª—å–∫–æ human —á–∞—Å—Ç—å
                                {
                                    "type": "image_url",
                                    "image_url": {
                                        "url": f"data:image/jpeg;base64,{base64_img}",
                                        "detail": "high"
                                    }
                                }
                            ]
                        }
                    ],
                    "max_tokens": 1000
                }

                response = openai.chat.completions.create(**vision_payload)
                return response.choices[0].message.content.strip()
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ (LangChain + Vision): {str(e)[:300]}"


        def save_to_pdf(problem_text, gpt_response, image_bytes, filename="—Ä–µ—à–µ–Ω–∏–µ.pdf"):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.multi_cell(0, 10, f"–ó–∞–¥–∞—á–∞:\n{problem_text}", align="L")

            with open("temp_image.jpg", "wb") as f:
                f.write(image_bytes.getvalue())
            pdf.image("temp_image.jpg", x=10, y=pdf.get_y(), w=180)
            pdf.ln(85)
            pdf.multi_cell(0, 10, f"–û—Ç–≤–µ—Ç GPT:\n{gpt_response}", align="L")
            pdf.output(filename)
            return filename

        if canvas_result.image_data is not None:
            image = Image.fromarray(canvas_result.image_data.astype("uint8"), mode="RGBA").convert("RGB")
            if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"):
                base64_img, buffer = encode_image_from_canvas(image)
                with st.spinner("GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..."):
                    result = analyze_with_gpt_vision(selected_problem, st.session_state.mark_scheme_text, base64_img)
                # üí∞ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
                    st.session_state.spent_usd += COST_GENERATE
                    df_budget.loc[df_budget["username"] == username, "spent_usd"] = st.session_state.spent_usd
                    df_budget.to_csv(BUDGET_FILE, index=False)
                if "–¢–∏–ø –æ—à–∏–±–∫–∏:" in result:
                    error_line = [line for line in result.split("\n") if "–¢–∏–ø –æ—à–∏–±–∫–∏:" in line]
                    error_type = error_line[0].split("–¢–∏–ø –æ—à–∏–±–∫–∏:")[-1].strip() if error_line else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    error_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                log = {
                    "username": username,
                    "unit": unit,
                    "task": selected_problem,
                    "gpt_response": result,
                    "error_type": error_type,
                    "difficulty": difficulty,  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞!
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                df_entry = pd.DataFrame([log])
                history_path = "history.csv"

                if os.path.exists(history_path):
                    df_history = pd.read_csv(history_path)
                    df_history = pd.concat([df_history, df_entry], ignore_index=True)
                else:
                    df_history = df_entry

                df_history.to_csv(history_path, index=False)
                st.markdown("### üîç –û—Ç–≤–µ—Ç –æ—Ç GPT:")
                for block in result.split("\n\n"):
                    if "$$" in block:
                        st.markdown(block, unsafe_allow_html=True) # —á—Ç–æ–±—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ñ–æ—Ä–º—É–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª
                    else:
                        st.markdown(f"> {block}") 


                log = {
                    "username": username,
                    "task": selected_problem,
                    "gpt_response": result,
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                df_log = pd.DataFrame([log])
                if os.path.exists("history.csv"):
                    df_log.to_csv("history.csv", mode="a", header=False, index=False)
                else:
                    df_log.to_csv("history.csv", index=False)

                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF"):
                    filename = save_to_pdf(selected_problem, result, buffer)
                    with open(filename, "rb") as pdf_file:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å PDF",
                            data=pdf_file,
                            file_name=filename,
                            mime="application/pdf"
                        )

    if role == "teacher":
        st.markdown("## üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª—å —É—á–∏—Ç–µ–ª—è")

        if os.path.exists("history.csv"):
            df_history = pd.read_csv("history.csv")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
            all_students = df_history["username"].unique().tolist()
            selected_student = st.selectbox("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞", all_students)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É
            student_df = df_history[df_history["username"] == selected_student]
            student_df["timestamp"] = pd.to_datetime(student_df["timestamp"])

            st.markdown(f"### üß† –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π: {selected_student}")
            st.dataframe(student_df)

            st.markdown("### üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–Ω—è–º")
            daily_counts = student_df["timestamp"].dt.date.value_counts().sort_index()
            st.line_chart(daily_counts)

            if "error_type" in student_df.columns:
                st.markdown("### üß† –¢–∏–ø—ã –æ—à–∏–±–æ–∫")
                st.bar_chart(student_df["error_type"].value_counts())
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –£—á–µ–Ω–∏–∫–∏ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∏ –∑–∞–¥–∞—á–∏.")

        def export_student_history_to_pdf(student_name, df):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt=f"–û—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É: {student_name}", ln=True)

            for i, row in df.iterrows():
                pdf.ln(10)
                pdf.multi_cell(0, 10, f"üìò –ó–∞–¥–∞—á–∞: {row['task']}")
                pdf.multi_cell(0, 10, f"üß† –û—Ç–≤–µ—Ç GPT:\n{row['gpt_response']}")
                if 'error_type' in row:
                    pdf.cell(0, 10, f"–¢–∏–ø –æ—à–∏–±–∫–∏: {row['error_type']}", ln=True)
                pdf.cell(0, 10, f"üïì –í—Ä–µ–º—è: {row['timestamp']}", ln=True)

            filename = f"{student_name}_report.pdf"
            pdf.output(filename)
            return filename

# üì§ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if st.button("üìÑ –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç –ø–æ —É—á–µ–Ω–∏–∫—É"):
            pdf_path = export_student_history_to_pdf(selected_student, student_df)
            with open(pdf_path, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å PDF",
                    data=f,
                    file_name=pdf_path,
                    mime="application/pdf"
                )


